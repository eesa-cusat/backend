version: '3.8'

services:
  web:
    build: .
    ports:
      - "80:8000"
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    depends_on:
      - db
    volumes:
      - static_files:/app/staticfiles
    command: >
      sh -c "echo '🔄 Setting up production database...' &&
             echo '📝 Creating migrations for accounts app...' &&
             python manage.py makemigrations accounts &&
             echo '📝 Creating migrations for all apps...' &&
             python manage.py makemigrations &&
             echo '🗄️ Running migrations...' &&
             python manage.py migrate --noinput &&
             echo '📦 Collecting static files...' &&
             python manage.py collectstatic --noinput &&
             echo '🚀 Starting production server...' &&
             gunicorn eesa_backend.wsgi:application --bind 0.0.0.0:8000"

  db:
    image: postgres:15
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Don't expose ports in production (internal communication only)

  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_files:/var/www/static
      - ssl_certs:/etc/ssl/certs
    depends_on:
      - web

volumes:
  postgres_data:
  static_files:
  ssl_certs:
