# Generated by Django 5.1.4 on 2025-07-19 19:42

import django.core.validators
import django.db.models.deletion
import events.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(default='')),
                ('event_type', models.CharField(choices=[('workshop', 'Workshop'), ('seminar', 'Seminar'), ('conference', 'Conference'), ('hackathon', 'Hackathon'), ('webinar', 'Webinar'), ('cultural', 'Cultural Event'), ('technical', 'Technical Event'), ('sports', 'Sports Event'), ('competition', 'Competition'), ('social', 'Social Event'), ('other', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='draft', max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(max_length=200)),
                ('venue', models.CharField(blank=True, max_length=200, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('is_online', models.BooleanField(default=False)),
                ('meeting_link', models.URLField(blank=True, help_text='Zoom/Teams/Meet link for online events', null=True)),
                ('registration_required', models.BooleanField(default=True)),
                ('max_participants', models.PositiveIntegerField(blank=True, help_text='Leave blank for unlimited', null=True)),
                ('registration_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('payment_required', models.BooleanField(default=False)),
                ('payment_qr_code', models.ImageField(blank=True, null=True, upload_to=events.models.payment_qr_upload_path)),
                ('payment_upi_id', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_instructions', models.TextField(blank=True, null=True)),
                ('contact_person', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('contact_phone', models.CharField(blank=True, max_length=15, null=True)),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to=events.models.event_banner_upload_path)),
                ('event_flyer', models.FileField(blank=True, null=True, upload_to=events.models.event_flyer_upload_path)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254)),
                ('mobile_number', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Enter a valid mobile number', regex='^\\+?1?\\d{9,15}$')])),
                ('institution', models.CharField(blank=True, max_length=200, null=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('year_of_study', models.CharField(blank=True, max_length=20, null=True)),
                ('organization', models.CharField(blank=True, max_length=200, null=True)),
                ('designation', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Payment Pending'), ('paid', 'Payment Completed'), ('exempted', 'Fee Exempted'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('payment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('payment_reference', models.CharField(blank=True, max_length=100, null=True)),
                ('dietary_requirements', models.TextField(blank=True, null=True)),
                ('special_needs', models.TextField(blank=True, null=True)),
                ('attended', models.BooleanField(default=False)),
                ('certificate_issued', models.BooleanField(default=False)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='events.event')),
                ('payment_verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-registered_at'],
            },
        ),
        migrations.CreateModel(
            name='EventFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_rating', models.IntegerField(choices=[(1, 'Poor'), (2, 'Fair'), (3, 'Good'), (4, 'Very Good'), (5, 'Excellent')])),
                ('content_rating', models.IntegerField(choices=[(1, 'Poor'), (2, 'Fair'), (3, 'Good'), (4, 'Very Good'), (5, 'Excellent')])),
                ('organization_rating', models.IntegerField(choices=[(1, 'Poor'), (2, 'Fair'), (3, 'Good'), (4, 'Very Good'), (5, 'Excellent')])),
                ('liked_most', models.TextField(blank=True, null=True)),
                ('improvements', models.TextField(blank=True, null=True)),
                ('additional_comments', models.TextField(blank=True, null=True)),
                ('would_recommend', models.BooleanField(default=True)),
                ('future_topics', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='events.event')),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='events.eventregistration')),
            ],
        ),
        migrations.CreateModel(
            name='EventSpeaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('title', models.CharField(help_text='e.g., CEO, Professor, etc.', max_length=200)),
                ('organization', models.CharField(max_length=200)),
                ('bio', models.TextField(blank=True, null=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to=events.models.speaker_profile_upload_path)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('twitter_url', models.URLField(blank=True, null=True)),
                ('website_url', models.URLField(blank=True, null=True)),
                ('talk_title', models.CharField(blank=True, max_length=200, null=True)),
                ('talk_abstract', models.TextField(blank=True, null=True)),
                ('talk_duration', models.PositiveIntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order in which speakers appear')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='speakers', to='events.event')),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EventSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('venue_details', models.CharField(blank=True, max_length=200, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='events.event')),
                ('speaker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.eventspeaker')),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_type', 'status'], name='events_even_event_t_985064_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_date'], name='events_even_start_d_d4b514_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['is_featured', 'is_active'], name='events_even_is_feat_2a0b22_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventregistration',
            unique_together={('event', 'email')},
        ),
        migrations.AlterUniqueTogether(
            name='eventfeedback',
            unique_together={('event', 'registration')},
        ),
    ]
